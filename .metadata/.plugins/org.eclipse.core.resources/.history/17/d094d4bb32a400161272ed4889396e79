package png;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.PixelGrabber;
import java.io.File;
import java.io.IOException;
import java.nio.ByteBuffer;

import javax.imageio.ImageIO;
//import javax.media.opengl.GL4;

import generic.classes.gfx.Texture;
//import src.JoglForms;

public abstract class PNG
{		
	public static Texture load(String fileName, boolean alpha)
	{
		File file = new File(fileName);
		try
		{
			BufferedImage img = ImageIO.read(file);
			AffineTransform affine = AffineTransform.getRotateInstance(Math.PI,0.0,0.0);
			affine.translate(-img.getWidth(null), -img.getHeight(null));
			
			AffineTransformOp op = new AffineTransformOp(affine, AffineTransformOp.TYPE_NEAREST_NEIGHBOR);
			img = op.filter(img, null);
			return readPixels(img, alpha);
		}
		catch(IOException e)
		{
			System.out.println("IOException!!");
			throw new RuntimeException(e);
		}
	}
	/*
	public static BufferedImage makeScreenshot(GL4 gl)
	{
		ByteBuffer output = Buffers.newDirectByteBuffer((int)(JoglForms.window.getDim().getLength() * JoglForms.window.getDim().getWidth() *3));
				
		BufferedImage tex = new BufferedImage(JoglForms.window.getDim().getLength().intValue(), JoglForms.window.getDim().getWidth().intValue(), BufferedImage.TYPE_INT_RGB); 
		Graphics graphics = tex.getGraphics();

		gl.glReadPixels(0,0, JoglForms.window.getDim().getLength().intValue(), JoglForms.window.getDim().getWidth().intValue(), GL4.GL_RGB, GL4.GL_BYTE, output);
		
	    for (int h = 0; h < JoglForms.window.getDim().getWidth().intValue(); h++) 
	    {
	        for (int w = 0; w < JoglForms.window.getDim().getLength().intValue(); w++) 
	        {
	            graphics.setColor(new Color( output.get()*2, output.get()*2, output.get()*2 ));
	            graphics.drawRect(w,JoglForms.window.getDim().getWidth().intValue() - h, 1, 1);
	        }
	    }
		return tex;
	}
	
	public static void save(String fileName, GL4 gl)
	{
		BufferedImage tex = makeScreenshot(gl);
		
		File file = new File(fileName);
		try
		{
			ImageIO.write(tex, "png", file);
		}
		catch (IOException e)
		{
			
		}
	}
	*/
	public static Texture readPixels(BufferedImage img, boolean alpha)
	{
		int[] packedPixels = new int[img.getWidth() * img.getHeight()];

        PixelGrabber pixelgrabber = new PixelGrabber(img, 0, 0, img.getWidth(), img.getHeight(), packedPixels, 0, img.getWidth());
        try 
        {
            pixelgrabber.grabPixels();
        } 
        catch (InterruptedException e) 
        {
            throw new RuntimeException();
        }

        int bytesPerPixel = alpha ? 4 : 3;
        //ByteBuffer unpackedPixels = Buffers.newDirectByteBuffer(packedPixels.length * bytesPerPixel);
        ByteBuffer unpackedPixels = ByteBuffer.wrap(new byte[packedPixels.length * bytesPerPixel]);
        
        for (int row = img.getHeight() - 1; row >= 0; row--) 
        {
            for (int col = 0; col < img.getWidth(); col++) 
            {
                
            	int packedPixel = packedPixels[row * img.getWidth() + col];
                unpackedPixels.put((byte) ((packedPixel >> 16) & 0xFF));
                unpackedPixels.put((byte) ((packedPixel >> 8) & 0xFF));
                unpackedPixels.put((byte) ((packedPixel >> 0) & 0xFF));
                if (alpha) 
                {
                    unpackedPixels.put((byte) ((packedPixel >> 24) & 0xFF));
                }
                
            }
        }
        unpackedPixels.flip();

        return new Texture(unpackedPixels, img.getWidth(), img.getHeight());
	}
}